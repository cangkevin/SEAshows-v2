# NOTE - https://vercel.com/guides/how-can-i-use-github-actions-with-vercel
# https://aaronfrancis.com/2021/the-perfect-vercel-github-actions-deployment-pipeline

name: Pull Request CI/CD

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  DATA_SOURCE_BASE_URL: ${{ secrets.DATA_SOURCE_BASE_URL }}
  IMAGE_DOMAIN: ${{ secrets.IMAGE_DOMAIN }}
  NEXT_PUBLIC_VIDEO_SOURCE_BASE_URL: ${{ secrets.NEXT_PUBLIC_VIDEO_SOURCE_BASE_URL }}

on:
  pull_request:
    branches:
      - main

jobs: # NOTE - each job has their own runner which can be thought of an independent virtual environment
# because of this, this requires checkout to happen in each independent job (https://github.com/actions/checkout/issues/19)
  preview:
    name: PR Build and Deploy
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.42.1
    timeout-minutes: 10

    # NOTE - https://davidmyers.dev/blog/how-to-deploy-to-vercel-with-github-actions
    environment:
      name: Preview
      url: ${{ steps.deploy.outputs.url }}
    outputs:
      preview-url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Extract Branch Name # NOTE -https://dev.to/thereis/how-to-remove-vercel-deployments-from-github-actions-4nfh
        id: extract_branch
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      - name: Hash Branch Name
        id: hash_branch
        run: echo -n "hash=$(echo -n "${{ steps.extract_branch.outputs.branch }}" | sha256sum | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT

      - name: Set Up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: npm
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Install Dependencies
        run: npm ci

      - name: Lint Code
        run: npm run lint

      - name: Build and Run Storybook Tests
        run: |
          npm run build-storybook --quiet &&
          npx concurrently -k -s first -n "SB,TEST" -c "magenta,blue" \
            "npx http-server storybook-static --port 6006 --silent" \
            "npx wait-on tcp:6006 && npm run test-storybook"
      - name: Build and Run Local E2E Tests
        run: npm run test:e2e:local
        env:
          HOME: /root

      - name: Pull Vercel Environment
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Vercel Build
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Vercel Deploy
        id: deploy
        run: echo "url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --meta base_hash=${{ env.META_TAG }})" >> $GITHUB_OUTPUT
        env:
          META_TAG: ${{ steps.hash_branch.outputs.hash }}-${{ github.run_number }}-${{ github.run_attempt }}

      - name: Run Smoke Tests
        run: npm run test:e2e
        env:
          HOME: /root
          BASE_URL: ${{ steps.deploy.outputs.url }} # NOTE https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs

  load-test:
    needs: preview
    name: Load Testing
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.42.1
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Install Dependencies
        run: npm ci
      - name: Run Artillery Tests
        run: npm run test:perf:preview
        env:
          HOME: /root
          BASE_URL: ${{ needs.preview.outputs.preview-url }}

  preview-comment:
    needs: preview
    name: Share Preview URL
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps: # NOTE - actions doesn't support parallel steps (https://github.com/orgs/community/discussions/14484)
      - name: Comment URL to PR
        uses: actions/github-script@v7
        id: comment-deployment-preview-url
        env:
          DEPLOYMENT_URL: ${{ needs.preview.outputs.preview-url }}
        with: # NOTE - https://github.com/vercel/vercel/discussions/9065#discussioncomment-7384786
          script: |
            // Get pull requests that are open for current ref.
            const pullRequests = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`
            })

            // Set issue number for following calls from context (if on pull request event) or from above variable.
            const issueNumber = context.issue.number || pullRequests.data[0].number

            // Retrieve existing bot comments for the PR
            const {data: comments} = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
            })
            const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Deployed at')
            })

            const output = "Deployed at " + process.env.DEPLOYMENT_URL

            // If we have a comment, update it, otherwise create a new one
            if (botComment) {
                github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: botComment.id,
                    body: output
                })
            } else {
                github.rest.issues.createComment({
                    issue_number: issueNumber,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                })
            }
